bool isPossible(vector<int> pages, int n, int m, int numPages) {
  int cntStudents = 1;
    int curSum = 0;
    for (int i = 0; i < n; i++) {
        if (pages[i] > numPages) {
            return false;
        }
        if (curSum + pages[i] > numPages) {
        
            //Increment student count by '1'
            cntStudents += 1;
            
            //assign current book to next student and update curSum
            curSum = pages[i];
            
            //If count of students becomes greater than given no. of students, return False
            if (cntStudents > m) {
                return false;
            }
        } else {
            //Else assign this book to current student and update curSum.
            curSum += pages[i];
        }
    }
    return true;
}

int findPages(vector<int> arr, int n, int m) {
    if (n < m) {
        return -1;
    }
    
    int s = 0;
    int sum = 0;
    
    for(int i = 0; i<n; i++) {
        sum += arr[i];
    }
    int e = sum;
    int ans = -1;
    int mid = s + (e-s)/2;
    
    while(s<=e)
    {
        if(isPossible(arr,n,m,mid)) {
            //cout<<" Mid returned TRUE" << endl;
            ans = mid;
            e = mid - 1;
        }
        else
        {
            s = mid + 1;
        }
        mid = s + (e-s)/2;
    }
    return ans;
}